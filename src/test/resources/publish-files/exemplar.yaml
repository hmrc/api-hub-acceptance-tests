---
openapi: 3.0.3
info:
  title: HIP Board Game Store
  description: |
    # Description
    This is an example OpenAPI schema defining an imaginary HIP Exemplar Board Game Store API.

    # Purpose
    This schema is designed to showcase some of the functionality of HIP Simple APIs by providing a number of endpoints
    and some information on what functionality each one demonstrates.
  version: 0.1.0
  x-integration-catalogue:
    reviewed-date: 2023-04-13T12:00:00Z
    publisher-reference: hip-exemplar-boardgames
    short-description: The HIP Exemplar Board Game Store API
    status: ALPHA
    api-type: SIMPLE
    platform: HIP
    backends:
    - internal
externalDocs:
  description: Find out more about the HIP Exemplar Board Game Store
  url: '*TODO*'
servers:
- url: https://api.hip.prod.eis.ns2p.corp.hmrc.gov.uk/demo/
  description: Corporate - Production
- url: https://api.hip.test.eis.ns2n.corp.hmrc.gov.uk/demo/
  description: Corporate - Test
- url: https://hip.ws.hmrc.gov.uk/demo/
  description: MDTP - Production
- url: https://hip.ws.ibt.hmrc.gov.uk/demo/
  description: MDTP - QA
tags:
- name: boardgame
  description: Endpoints related to board games
- name: store
  description: Endpoints related to store operations
paths:
  /v1/boardgames:
    post:
      tags:
      - boardgame
      summary: Add a new board game to the store
      description: |
        # Description
        Add a new board game to the store.

        # Functionality demonstrated
        * A POST request with a JSON payload that will be validated against a schema
        * Multiple Scopes all of which are required to perform the operation
        * Multiple possible response status codes
      operationId: addBoardGame
      requestBody:
        $ref: '#/components/requestBodies/BoardGame'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BoardGame'
              example:
                $ref: '#/components/examples/ValidBoardGame'
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                required:
                - origin
                - response
                type: object
                properties:
                  origin:
                    $ref: '#/components/schemas/HIP-originEnum'
                  response:
                    oneOf:
                    - $ref: '#/components/schemas/HIP-failureResponse'
                    - $ref: '#/components/schemas/ErrorResponse'
                additionalProperties: false
              examples:
                invalidPayload:
                  $ref: '#/components/examples/InvalidPayload'
      security:
      - oAuth2:
        - read:exemplar-boardgames
        - write:exemplar-boardgames
  /v1/boardgames/findByStatus:
    get:
      tags:
      - boardgame
      summary: Finds board games by status
      description: |
        # Description
        Multiple status values can be provided with comma separated strings

        # Functionality demonstrated
        * A GET request with QueryString parameters that are validated
        * Enum parameters
        * A single Scope required to perform the operation
      operationId: findBoardGamesByStatus
      parameters:
      - name: status
        in: query
        description: Status values that need to be considered for filter
        required: false
        schema:
          default: available
          enum:
          - available
          - pending
          - sold
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BoardGame'
              example:
                $ref: '#/components/examples/ValidBoardGames'
        "400":
          description: Invalid status value
          content:
            application/json:
              schema:
                required:
                - origin
                - response
                type: object
                properties:
                  origin:
                    $ref: '#/components/schemas/HIP-originEnum'
                  response:
                    oneOf:
                    - $ref: '#/components/schemas/HIP-failureResponse'
                    - $ref: '#/components/schemas/ErrorResponse'
                additionalProperties: false
              examples:
                invalidParameter:
                  $ref: '#/components/examples/InvalidParameter'
      security:
      - oAuth2:
        - read:exemplar-boardgames
  /v1/boardgames/findByTags:
    get:
      tags:
      - boardgame
      summary: Finds board games by tags
      description: |
        # Description
        Multiple tags can be provided with comma separated strings.

        # Functionality demonstrated
        * A GET request with array of QueryString parameters that are validated
      operationId: findBoardGamesByTags
      parameters:
      - name: tags
        in: query
        description: Tags to filter by
        required: false
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BoardGame'
              example:
                $ref: '#/components/examples/ValidBoardGames'
        "400":
          description: Invalid tag value
          content:
            application/json:
              schema:
                required:
                - origin
                - response
                type: object
                properties:
                  origin:
                    $ref: '#/components/schemas/HIP-originEnum'
                  response:
                    oneOf:
                    - $ref: '#/components/schemas/HIP-failureResponse'
                    - $ref: '#/components/schemas/ErrorResponse'
                additionalProperties: false
              examples:
                invalidParameter:
                  $ref: '#/components/examples/InvalidParameter'
      security:
      - oAuth2:
        - read:exemplar-boardgames
  /v1/boardgames/{boardGameId}:
    get:
      tags:
      - boardgame
      summary: Find board game by ID
      description: |
        # Description
        Find a single board game by it's boardGameId.

        # Functionality demonstrated
        * A GET request with a Path variable that is validated
      operationId: getBoardGameById
      parameters:
      - name: boardGameId
        in: path
        description: ID of board game to return
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BoardGame'
              example:
                $ref: '#/components/examples/ValidBoardGame'
        "400":
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                required:
                - origin
                - response
                type: object
                properties:
                  origin:
                    $ref: '#/components/schemas/HIP-originEnum'
                  response:
                    oneOf:
                    - $ref: '#/components/schemas/HIP-failureResponse'
                    - $ref: '#/components/schemas/ErrorResponse'
                additionalProperties: false
              examples:
                invalidParameter:
                  $ref: '#/components/examples/InvalidParameter'
        "404":
          description: Board game not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                notFound:
                  $ref: '#/components/examples/NotFound'
      security:
      - oAuth2:
        - read:exemplar-boardgames
    put:
      tags:
      - boardgame
      summary: Update an existing board game
      description: |
        # Description
        Update an existing board game by boardGameId.

        # Functionality demonstrated
        * A PUT request with Path parameter and a JSON body that will be validated
      operationId: updateBoardGame
      parameters:
      - name: boardGameId
        in: path
        description: ID of board game to update
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        description: Update an existing board game in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BoardGame'
            example:
              $ref: '#/components/examples/ValidBoardGame'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BoardGame'
              example:
                $ref: '#/components/examples/ValidBoardGame'
        "400":
          description: Invalid boardGameId or JSON payload supplied
          content:
            application/json:
              schema:
                required:
                - origin
                - response
                type: object
                properties:
                  origin:
                    $ref: '#/components/schemas/HIP-originEnum'
                  response:
                    oneOf:
                    - $ref: '#/components/schemas/HIP-failureResponse'
                    - $ref: '#/components/schemas/ErrorResponse'
                additionalProperties: false
              examples:
                invalidPayload:
                  $ref: '#/components/examples/InvalidPayload'
                invalidParameter:
                  $ref: '#/components/examples/InvalidParameter'
        "404":
          description: Board game not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                notFound:
                  $ref: '#/components/examples/NotFound'
      security:
      - oAuth2:
        - write:exemplar-boardgames
    delete:
      tags:
      - boardgame
      summary: Deletes a board game
      description: |
        # Description
        Deletes a board game from the store. Requires a header containing the board game name to be provided confirming the deletion.

        # Functionality demonstrated
        * A DELETE request with both a Path variable and Header variable that will be validated
        * Scopes
        * Multiple possible response status codes
      operationId: deleteBoardGame
      parameters:
      - name: boardGameName
        in: header
        description: The name of the board game to be deleted
        required: true
        schema:
          type: string
      - name: boardGameId
        in: path
        description: Board game id to delete
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid boardGameId or boardGameName supplied
          content:
            application/json:
              schema:
                required:
                - origin
                - response
                type: object
                properties:
                  origin:
                    $ref: '#/components/schemas/HIP-originEnum'
                  response:
                    oneOf:
                    - $ref: '#/components/schemas/HIP-failureResponse'
                    - $ref: '#/components/schemas/ErrorResponse'
                additionalProperties: false
              examples:
                invalidParameter:
                  $ref: '#/components/examples/InvalidParameter'
        "404":
          description: Board game not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                notFound:
                  $ref: '#/components/examples/NotFound'
      security:
      - oAuth2:
        - write:exemplar-boardgames
  /v1/store/inventory:
    get:
      tags:
      - store
      summary: Returns board game inventories by status
      description: |
        # Description
        Returns a map of status codes to quantities

        # Functionality demonstrated
        * A GET request without parameters
        * An inline JSON response schema without $ref
      operationId: getInventory
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  format: int32
                  type: integer
              example: |
                {
                  "property": 1,
                  "anotherProperty": 70
                }
      security:
      - oAuth2:
        - read:exemplar-store
  /v1/store/orders:
    post:
      tags:
      - store
      summary: Place an order for a board game
      description: "# Description\nPlace a new order for a board game in the store.\
        \    \n\n# Functionality demonstrated\n* A POST request with JSON payload\
        \ that is validated.\n* Inline examples in yaml and JSON format\n"
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
            example: |
              {
                "id": 543,
                "boardGameId": 98123,
                "quantity": 4,
                "shipDate": "2023-04-13T14:35:28.595Z",
                "status": "shipped",
                "complete": false
              }
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
              example:
                id: 543
                boardGameId: 98123
                quantity: 4
                shipDate: 2023-04-13T14:35:28.595Z
                status: shipped
                complete: false
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                required:
                - origin
                - response
                type: object
                properties:
                  origin:
                    $ref: '#/components/schemas/HIP-originEnum'
                  response:
                    oneOf:
                    - $ref: '#/components/schemas/HIP-failureResponse'
                    - $ref: '#/components/schemas/ErrorResponse'
                additionalProperties: false
              examples:
                invalidPayload:
                  $ref: '#/components/examples/InvalidPayload'
      security:
      - oAuth2:
        - write:exemplar-store
  /v1/store/orders/{orderId}:
    get:
      tags:
      - store
      summary: Find purchase order by ID
      description: |
        # Description
        Find an order using the orderId.

        # Functionality demonstrated
        * A GET request with a Path parameter
      operationId: getOrderById
      parameters:
      - name: orderId
        in: path
        description: ID of order that needs to be fetched
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
              example:
                $ref: '#/components/examples/ValidOrder'
        "400":
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                required:
                - origin
                - response
                type: object
                properties:
                  origin:
                    $ref: '#/components/schemas/HIP-originEnum'
                  response:
                    oneOf:
                    - $ref: '#/components/schemas/HIP-failureResponse'
                    - $ref: '#/components/schemas/ErrorResponse'
                additionalProperties: false
              examples:
                invalidParameter:
                  $ref: '#/components/examples/InvalidParameter'
        "404":
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: NOT_FOUND
                description: The order does not exist.
      security:
      - oAuth2:
        - read:exemplar-store
components:
  schemas:
    Order:
      required:
      - boardGameId
      - id
      - quantity
      type: object
      properties:
        id:
          format: int64
          type: integer
          example: 123456
        boardGameId:
          format: int64
          type: integer
          example: 765
        quantity:
          format: int32
          type: integer
          example: 1
        shipDate:
          format: date-time
          type: string
        status:
          description: Order Status
          enum:
          - placed
          - shipped
          - delivered
          type: string
          example: shipped
        complete:
          type: boolean
    Category:
      type: object
      properties:
        id:
          format: int64
          type: integer
          example: 1
        name:
          type: string
          example: Card Games
    Tag:
      type: object
      properties:
        id:
          format: int64
          type: integer
        name:
          type: string
          example: Most Popular
    BoardGame:
      required:
      - category
      - name
      type: object
      properties:
        id:
          format: int64
          type: integer
          example: 10
        name:
          type: string
          example: Exploding Kittens
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          items:
            type: string
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        status:
          description: Board game status in the store
          enum:
          - available
          - pending
          - sold
          type: string
          example: available
      additionalProperties: false
    ErrorResponse:
      description: Schema defining the format of the error response
      type: object
      properties:
        code:
          description: A code identifying the type of error
          type: string
          example: NOT_FOUND
        message:
          description: A summary message indicating what the error is
          type: string
          example: The order does not exist.
    HIP-originEnum:
      enum:
      - HIP
      - HoD
      type: string
    HIP-failureResponse:
      required:
      - failures
      type: object
      properties:
        failures:
          minItems: 1
          uniqueItems: true
          type: array
          items:
            required:
            - type
            - reason
            type: object
            properties:
              type:
                type: string
              reason:
                type: string
            additionalProperties: false
    HIP-originResponse:
      required:
      - origin
      - response
      type: object
      properties:
        origin:
          $ref: '#/components/schemas/HIP-originEnum'
        response:
          $ref: '#/components/schemas/HIP-failureResponse'
      additionalProperties: false
  examples:
    ValidBoardGame:
      summary: a valid boardgame
      value: |
        {
          "id": 10,
          "name": "Exploding Kittens",
          "category": {
            "id": 1,
            "name": "Card Games"
          },
          "photoUrls": [
            "string"
          ],
          "tags": [
            {
              "id": 0,
              "name": "Most Popular"
            }
          ],
          "status": "available"
        }
    ValidBoardGames:
      summary: an array of boardgames
      value: |
        [
          {
            "id": 10,
            "name": "Exploding Kittens",
            "category": {
              "id": 1,
              "name": "Card Games"
            },
            "photoUrls": [
              "string"
            ],
            "tags": [
              {
                "id": 0,
                "name": "Most Popular"
              }
            ],
            "status": "available"
          }
        ]
    ValidOrder:
      summary: a valid order
      value: |
        {
          "id": 543,
          "boardGameId": 98123,
          "quantity": 4,
          "shipDate": "2023-04-13T14:35:28.595Z",
          "status": "shipped",
          "complete": false
        }
    NotFound:
      summary: Example of a 404 Not Found
      value:
        code: NOT_FOUND
        description: The board game does not exist.
    InvalidPayload:
      summary: Example of an invalid payload
      value:
        code: INVALID_PAYLOAD
        description: The payload provided was invalid.
    InvalidParameter:
      summary: Example of an invalid parameter
      value:
        code: INVALID_PARAMETER
        description: One of the parameters provided was invalid.
  requestBodies:
    BoardGame:
      description: BoardGame object that needs to be added or updated into the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BoardGame'
      required: true
  securitySchemes:
    oAuth2:
      type: oauth2
      description: OAuth2 Client Credentials Flow
      flows:
        clientCredentials:
          tokenUrl: /tokenUrl/not-required
          scopes:
            read:exemplar-boardgames: read board game information
            read:exemplar-store: read store information
            write:exemplar-boardgames: create and modify board games
            write:exemplar-store: create and modify store information